
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c62  00000cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000cf8  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002830  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b73  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f2  00000000  00000000  000034c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072b  00000000  00000000  000038b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000938  00000000  00000000  00004649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
  8a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "std_macros.h"

void ADC_init()
{
	//Assuming channel A0 (ADC0)
	SET_BIT(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);
  96:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
  9a:	32 9a       	sbi	0x06, 2	; 6
}
  9c:	08 95       	ret

0000009e <ADC_read>:
unsigned short ADC_read()
{
	unsigned short val;
	SET_BIT(ADCSRA,ADSC);
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	86 fd       	sbrc	r24, 6
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <ADC_read+0x2>
	/* while(READ_BIT(ADCSRA,ADIF)==0);
	   SET_BIT(ADCSRA,ADIF); */
	val= ADCL;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	val|=(ADCH<<8);
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	return val;
  b4:	08 95       	ret

000000b6 <DIO_setPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_setPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_setPINDir+0x6>
  ba:	71 c0       	rjmp	.+226    	; 0x19e <DIO_setPINDir+0xe8>
  bc:	85 34       	cpi	r24, 0x45	; 69
  be:	48 f4       	brcc	.+18     	; 0xd2 <DIO_setPINDir+0x1c>
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	99 f1       	breq	.+102    	; 0x12a <DIO_setPINDir+0x74>
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	08 f0       	brcs	.+2      	; 0xca <DIO_setPINDir+0x14>
  c8:	4d c0       	rjmp	.+154    	; 0x164 <DIO_setPINDir+0xae>
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_setPINDir+0x1a>
  ce:	83 c0       	rjmp	.+262    	; 0x1d6 <DIO_setPINDir+0x120>
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <DIO_setPINDir+0x3a>
  d2:	82 36       	cpi	r24, 0x62	; 98
  d4:	51 f1       	breq	.+84     	; 0x12a <DIO_setPINDir+0x74>
  d6:	83 36       	cpi	r24, 0x63	; 99
  d8:	20 f4       	brcc	.+8      	; 0xe2 <DIO_setPINDir+0x2c>
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	09 f0       	breq	.+2      	; 0xe0 <DIO_setPINDir+0x2a>
  de:	7b c0       	rjmp	.+246    	; 0x1d6 <DIO_setPINDir+0x120>
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <DIO_setPINDir+0x3a>
  e2:	83 36       	cpi	r24, 0x63	; 99
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_setPINDir+0x32>
  e6:	3e c0       	rjmp	.+124    	; 0x164 <DIO_setPINDir+0xae>
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_setPINDir+0x38>
  ec:	74 c0       	rjmp	.+232    	; 0x1d6 <DIO_setPINDir+0x120>
  ee:	57 c0       	rjmp	.+174    	; 0x19e <DIO_setPINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(direction==1)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	69 f4       	brne	.+26     	; 0x10e <DIO_setPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
  f4:	2a b3       	in	r18, 0x1a	; 26
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ac 01       	movw	r20, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_setPINDir+0x4c>
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_setPINDir+0x48>
 106:	ba 01       	movw	r22, r20
 108:	62 2b       	or	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_setPINDir+0x66>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_setPINDir+0x62>
 120:	ba 01       	movw	r22, r20
 122:	60 95       	com	r22
 124:	62 23       	and	r22, r18
 126:	6a bb       	out	0x1a, r22	; 26
 128:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(direction==1)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_setPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_setPINDir+0x86>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_setPINDir+0x82>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
		}
		else
		{
				CLR_BIT(DDRB,pinnumber);
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPINDir+0xa0>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPINDir+0x9c>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <DIO_setPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_setPINDir+0xc0>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_setPINDir+0xbc>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_setPINDir+0xda>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_setPINDir+0xd6>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	64 bb       	out	0x14, r22	; 20
 19c:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <DIO_setPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_setPINDir+0xfa>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_setPINDir+0xf6>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_setPINDir+0x114>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_setPINDir+0x110>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	61 bb       	out	0x11, r22	; 17
 1d6:	08 95       	ret

000001d8 <DIO_writePIN>:
		break;
	}
}
void DIO_writePIN(unsigned char portname,unsigned char pinnumber,unsigned char val)
{
	switch(portname)
 1d8:	84 34       	cpi	r24, 0x44	; 68
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_writePIN+0x6>
 1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <DIO_writePIN+0xe8>
 1de:	85 34       	cpi	r24, 0x45	; 69
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <DIO_writePIN+0x1c>
 1e2:	82 34       	cpi	r24, 0x42	; 66
 1e4:	99 f1       	breq	.+102    	; 0x24c <DIO_writePIN+0x74>
 1e6:	83 34       	cpi	r24, 0x43	; 67
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_writePIN+0x14>
 1ea:	4d c0       	rjmp	.+154    	; 0x286 <DIO_writePIN+0xae>
 1ec:	81 34       	cpi	r24, 0x41	; 65
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_writePIN+0x1a>
 1f0:	83 c0       	rjmp	.+262    	; 0x2f8 <DIO_writePIN+0x120>
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <DIO_writePIN+0x3a>
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	51 f1       	breq	.+84     	; 0x24c <DIO_writePIN+0x74>
 1f8:	83 36       	cpi	r24, 0x63	; 99
 1fa:	20 f4       	brcc	.+8      	; 0x204 <DIO_writePIN+0x2c>
 1fc:	81 36       	cpi	r24, 0x61	; 97
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_writePIN+0x2a>
 200:	7b c0       	rjmp	.+246    	; 0x2f8 <DIO_writePIN+0x120>
 202:	07 c0       	rjmp	.+14     	; 0x212 <DIO_writePIN+0x3a>
 204:	83 36       	cpi	r24, 0x63	; 99
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_writePIN+0x32>
 208:	3e c0       	rjmp	.+124    	; 0x286 <DIO_writePIN+0xae>
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	09 f0       	breq	.+2      	; 0x210 <DIO_writePIN+0x38>
 20e:	74 c0       	rjmp	.+232    	; 0x2f8 <DIO_writePIN+0x120>
 210:	57 c0       	rjmp	.+174    	; 0x2c0 <DIO_writePIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	69 f4       	brne	.+26     	; 0x230 <DIO_writePIN+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_writePIN+0x4c>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_writePIN+0x48>
 228:	ba 01       	movw	r22, r20
 22a:	62 2b       	or	r22, r18
 22c:	6b bb       	out	0x1b, r22	; 27
 22e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_writePIN+0x66>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_writePIN+0x62>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	6b bb       	out	0x1b, r22	; 27
 24a:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	69 f4       	brne	.+26     	; 0x26a <DIO_writePIN+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	ac 01       	movw	r20, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_writePIN+0x86>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_writePIN+0x82>
 262:	ba 01       	movw	r22, r20
 264:	62 2b       	or	r22, r18
 266:	68 bb       	out	0x18, r22	; 24
 268:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_writePIN+0xa0>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_writePIN+0x9c>
 27c:	ba 01       	movw	r22, r20
 27e:	60 95       	com	r22
 280:	62 23       	and	r22, r18
 282:	68 bb       	out	0x18, r22	; 24
 284:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_writePIN+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 28a:	25 b3       	in	r18, 0x15	; 21
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_writePIN+0xc0>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_writePIN+0xbc>
 29c:	ba 01       	movw	r22, r20
 29e:	62 2b       	or	r22, r18
 2a0:	65 bb       	out	0x15, r22	; 21
 2a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_writePIN+0xda>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_writePIN+0xd6>
 2b6:	ba 01       	movw	r22, r20
 2b8:	60 95       	com	r22
 2ba:	62 23       	and	r22, r18
 2bc:	65 bb       	out	0x15, r22	; 21
 2be:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	69 f4       	brne	.+26     	; 0x2de <DIO_writePIN+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 2c4:	22 b3       	in	r18, 0x12	; 18
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_writePIN+0xfa>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_writePIN+0xf6>
 2d6:	ba 01       	movw	r22, r20
 2d8:	62 2b       	or	r22, r18
 2da:	62 bb       	out	0x12, r22	; 18
 2dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 2de:	22 b3       	in	r18, 0x12	; 18
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_writePIN+0x114>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_writePIN+0x110>
 2f0:	ba 01       	movw	r22, r20
 2f2:	60 95       	com	r22
 2f4:	62 23       	and	r22, r18
 2f6:	62 bb       	out	0x12, r22	; 18
 2f8:	08 95       	ret

000002fa <DIO_togglePIN>:
		break;
	}
}
void DIO_togglePIN(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 2fa:	84 34       	cpi	r24, 0x44	; 68
 2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_togglePIN+0x6>
 2fe:	3d c0       	rjmp	.+122    	; 0x37a <DIO_togglePIN+0x80>
 300:	85 34       	cpi	r24, 0x45	; 69
 302:	40 f4       	brcc	.+16     	; 0x314 <DIO_togglePIN+0x1a>
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	f9 f0       	breq	.+62     	; 0x346 <DIO_togglePIN+0x4c>
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	50 f5       	brcc	.+84     	; 0x360 <DIO_togglePIN+0x66>
 30c:	81 34       	cpi	r24, 0x41	; 65
 30e:	09 f0       	breq	.+2      	; 0x312 <DIO_togglePIN+0x18>
 310:	40 c0       	rjmp	.+128    	; 0x392 <DIO_togglePIN+0x98>
 312:	0c c0       	rjmp	.+24     	; 0x32c <DIO_togglePIN+0x32>
 314:	82 36       	cpi	r24, 0x62	; 98
 316:	b9 f0       	breq	.+46     	; 0x346 <DIO_togglePIN+0x4c>
 318:	83 36       	cpi	r24, 0x63	; 99
 31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_togglePIN+0x28>
 31c:	81 36       	cpi	r24, 0x61	; 97
 31e:	c9 f5       	brne	.+114    	; 0x392 <DIO_togglePIN+0x98>
 320:	05 c0       	rjmp	.+10     	; 0x32c <DIO_togglePIN+0x32>
 322:	83 36       	cpi	r24, 0x63	; 99
 324:	e9 f0       	breq	.+58     	; 0x360 <DIO_togglePIN+0x66>
 326:	84 36       	cpi	r24, 0x64	; 100
 328:	a1 f5       	brne	.+104    	; 0x392 <DIO_togglePIN+0x98>
 32a:	27 c0       	rjmp	.+78     	; 0x37a <DIO_togglePIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 32c:	2b b3       	in	r18, 0x1b	; 27
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_togglePIN+0x40>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_togglePIN+0x3c>
 33e:	ba 01       	movw	r22, r20
 340:	62 27       	eor	r22, r18
 342:	6b bb       	out	0x1b, r22	; 27
		break;
 344:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 346:	28 b3       	in	r18, 0x18	; 24
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ac 01       	movw	r20, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_togglePIN+0x5a>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_togglePIN+0x56>
 358:	ba 01       	movw	r22, r20
 35a:	62 27       	eor	r22, r18
 35c:	68 bb       	out	0x18, r22	; 24
		break;
 35e:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	ac 01       	movw	r20, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_togglePIN+0x74>
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_togglePIN+0x70>
 372:	ba 01       	movw	r22, r20
 374:	62 27       	eor	r22, r18
 376:	65 bb       	out	0x15, r22	; 21
		break;
 378:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_togglePIN+0x8e>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_togglePIN+0x8a>
 38c:	ba 01       	movw	r22, r20
 38e:	62 27       	eor	r22, r18
 390:	62 bb       	out	0x12, r22	; 18
 392:	08 95       	ret

00000394 <DIO_readPIN>:
	}
}
unsigned char DIO_readPIN(unsigned char portname,unsigned char pinnumber)
{
	unsigned char val;
	switch(portname)
 394:	84 34       	cpi	r24, 0x44	; 68
 396:	b1 f1       	breq	.+108    	; 0x404 <DIO_readPIN+0x70>
 398:	85 34       	cpi	r24, 0x45	; 69
 39a:	38 f4       	brcc	.+14     	; 0x3aa <DIO_readPIN+0x16>
 39c:	82 34       	cpi	r24, 0x42	; 66
 39e:	e1 f0       	breq	.+56     	; 0x3d8 <DIO_readPIN+0x44>
 3a0:	83 34       	cpi	r24, 0x43	; 67
 3a2:	28 f5       	brcc	.+74     	; 0x3ee <DIO_readPIN+0x5a>
 3a4:	81 34       	cpi	r24, 0x41	; 65
 3a6:	c1 f5       	brne	.+112    	; 0x418 <DIO_readPIN+0x84>
 3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <DIO_readPIN+0x2e>
 3aa:	82 36       	cpi	r24, 0x62	; 98
 3ac:	a9 f0       	breq	.+42     	; 0x3d8 <DIO_readPIN+0x44>
 3ae:	83 36       	cpi	r24, 0x63	; 99
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <DIO_readPIN+0x24>
 3b2:	81 36       	cpi	r24, 0x61	; 97
 3b4:	89 f5       	brne	.+98     	; 0x418 <DIO_readPIN+0x84>
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <DIO_readPIN+0x2e>
 3b8:	83 36       	cpi	r24, 0x63	; 99
 3ba:	c9 f0       	breq	.+50     	; 0x3ee <DIO_readPIN+0x5a>
 3bc:	84 36       	cpi	r24, 0x64	; 100
 3be:	61 f5       	brne	.+88     	; 0x418 <DIO_readPIN+0x84>
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <DIO_readPIN+0x70>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pinnumber);
 3c2:	29 b3       	in	r18, 0x19	; 25
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	c9 01       	movw	r24, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_readPIN+0x3a>
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_readPIN+0x36>
 3d2:	98 2f       	mov	r25, r24
 3d4:	91 70       	andi	r25, 0x01	; 1
		break;
 3d6:	20 c0       	rjmp	.+64     	; 0x418 <DIO_readPIN+0x84>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pinnumber);
 3d8:	26 b3       	in	r18, 0x16	; 22
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	c9 01       	movw	r24, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_readPIN+0x50>
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_readPIN+0x4c>
 3e8:	98 2f       	mov	r25, r24
 3ea:	91 70       	andi	r25, 0x01	; 1
		break;
 3ec:	15 c0       	rjmp	.+42     	; 0x418 <DIO_readPIN+0x84>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pinnumber);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_readPIN+0x66>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_readPIN+0x62>
 3fe:	98 2f       	mov	r25, r24
 400:	91 70       	andi	r25, 0x01	; 1
		break;
 402:	0a c0       	rjmp	.+20     	; 0x418 <DIO_readPIN+0x84>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pinnumber);
 404:	20 b3       	in	r18, 0x10	; 16
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	c9 01       	movw	r24, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_readPIN+0x7c>
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_readPIN+0x78>
 414:	98 2f       	mov	r25, r24
 416:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return val;
}
 418:	89 2f       	mov	r24, r25
 41a:	08 95       	ret

0000041c <DIO_setPORTDir>:
void DIO_setPORTDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 41c:	84 34       	cpi	r24, 0x44	; 68
 41e:	d9 f0       	breq	.+54     	; 0x456 <DIO_setPORTDir+0x3a>
 420:	85 34       	cpi	r24, 0x45	; 69
 422:	38 f4       	brcc	.+14     	; 0x432 <DIO_setPORTDir+0x16>
 424:	82 34       	cpi	r24, 0x42	; 66
 426:	99 f0       	breq	.+38     	; 0x44e <DIO_setPORTDir+0x32>
 428:	83 34       	cpi	r24, 0x43	; 67
 42a:	98 f4       	brcc	.+38     	; 0x452 <DIO_setPORTDir+0x36>
 42c:	81 34       	cpi	r24, 0x41	; 65
 42e:	a1 f4       	brne	.+40     	; 0x458 <DIO_setPORTDir+0x3c>
 430:	0c c0       	rjmp	.+24     	; 0x44a <DIO_setPORTDir+0x2e>
 432:	82 36       	cpi	r24, 0x62	; 98
 434:	61 f0       	breq	.+24     	; 0x44e <DIO_setPORTDir+0x32>
 436:	83 36       	cpi	r24, 0x63	; 99
 438:	18 f4       	brcc	.+6      	; 0x440 <DIO_setPORTDir+0x24>
 43a:	81 36       	cpi	r24, 0x61	; 97
 43c:	69 f4       	brne	.+26     	; 0x458 <DIO_setPORTDir+0x3c>
 43e:	05 c0       	rjmp	.+10     	; 0x44a <DIO_setPORTDir+0x2e>
 440:	83 36       	cpi	r24, 0x63	; 99
 442:	39 f0       	breq	.+14     	; 0x452 <DIO_setPORTDir+0x36>
 444:	84 36       	cpi	r24, 0x64	; 100
 446:	41 f4       	brne	.+16     	; 0x458 <DIO_setPORTDir+0x3c>
 448:	06 c0       	rjmp	.+12     	; 0x456 <DIO_setPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 44a:	6a bb       	out	0x1a, r22	; 26
		break;
 44c:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 44e:	67 bb       	out	0x17, r22	; 23
		break;
 450:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 452:	64 bb       	out	0x14, r22	; 20
		break;
 454:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 456:	61 bb       	out	0x11, r22	; 17
 458:	08 95       	ret

0000045a <DIO_writePORT>:
		break;
	}
}
void DIO_writePORT(unsigned char portname,unsigned char val)
{
	switch(portname)
 45a:	84 34       	cpi	r24, 0x44	; 68
 45c:	d9 f0       	breq	.+54     	; 0x494 <DIO_writePORT+0x3a>
 45e:	85 34       	cpi	r24, 0x45	; 69
 460:	38 f4       	brcc	.+14     	; 0x470 <DIO_writePORT+0x16>
 462:	82 34       	cpi	r24, 0x42	; 66
 464:	99 f0       	breq	.+38     	; 0x48c <DIO_writePORT+0x32>
 466:	83 34       	cpi	r24, 0x43	; 67
 468:	98 f4       	brcc	.+38     	; 0x490 <DIO_writePORT+0x36>
 46a:	81 34       	cpi	r24, 0x41	; 65
 46c:	a1 f4       	brne	.+40     	; 0x496 <DIO_writePORT+0x3c>
 46e:	0c c0       	rjmp	.+24     	; 0x488 <DIO_writePORT+0x2e>
 470:	82 36       	cpi	r24, 0x62	; 98
 472:	61 f0       	breq	.+24     	; 0x48c <DIO_writePORT+0x32>
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	18 f4       	brcc	.+6      	; 0x47e <DIO_writePORT+0x24>
 478:	81 36       	cpi	r24, 0x61	; 97
 47a:	69 f4       	brne	.+26     	; 0x496 <DIO_writePORT+0x3c>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <DIO_writePORT+0x2e>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_writePORT+0x36>
 482:	84 36       	cpi	r24, 0x64	; 100
 484:	41 f4       	brne	.+16     	; 0x496 <DIO_writePORT+0x3c>
 486:	06 c0       	rjmp	.+12     	; 0x494 <DIO_writePORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 488:	6b bb       	out	0x1b, r22	; 27
		break;
 48a:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 48c:	68 bb       	out	0x18, r22	; 24
		break;
 48e:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 490:	65 bb       	out	0x15, r22	; 21
		break;
 492:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 494:	62 bb       	out	0x12, r22	; 18
 496:	08 95       	ret

00000498 <DIO_togglePORT>:
		break;
	}
}
void DIO_togglePORT(unsigned char portname)
{
	switch(portname)
 498:	84 34       	cpi	r24, 0x44	; 68
 49a:	09 f1       	breq	.+66     	; 0x4de <DIO_togglePORT+0x46>
 49c:	85 34       	cpi	r24, 0x45	; 69
 49e:	38 f4       	brcc	.+14     	; 0x4ae <DIO_togglePORT+0x16>
 4a0:	82 34       	cpi	r24, 0x42	; 66
 4a2:	a9 f0       	breq	.+42     	; 0x4ce <DIO_togglePORT+0x36>
 4a4:	83 34       	cpi	r24, 0x43	; 67
 4a6:	b8 f4       	brcc	.+46     	; 0x4d6 <DIO_togglePORT+0x3e>
 4a8:	81 34       	cpi	r24, 0x41	; 65
 4aa:	e1 f4       	brne	.+56     	; 0x4e4 <DIO_togglePORT+0x4c>
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <DIO_togglePORT+0x2e>
 4ae:	82 36       	cpi	r24, 0x62	; 98
 4b0:	71 f0       	breq	.+28     	; 0x4ce <DIO_togglePORT+0x36>
 4b2:	83 36       	cpi	r24, 0x63	; 99
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <DIO_togglePORT+0x24>
 4b6:	81 36       	cpi	r24, 0x61	; 97
 4b8:	a9 f4       	brne	.+42     	; 0x4e4 <DIO_togglePORT+0x4c>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <DIO_togglePORT+0x2e>
 4bc:	83 36       	cpi	r24, 0x63	; 99
 4be:	59 f0       	breq	.+22     	; 0x4d6 <DIO_togglePORT+0x3e>
 4c0:	84 36       	cpi	r24, 0x64	; 100
 4c2:	81 f4       	brne	.+32     	; 0x4e4 <DIO_togglePORT+0x4c>
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <DIO_togglePORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=(~PORTA);
 4c6:	8b b3       	in	r24, 0x1b	; 27
 4c8:	80 95       	com	r24
 4ca:	8b bb       	out	0x1b, r24	; 27
		break;
 4cc:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=(~PORTB);
 4ce:	88 b3       	in	r24, 0x18	; 24
 4d0:	80 95       	com	r24
 4d2:	88 bb       	out	0x18, r24	; 24
		break;
 4d4:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=(~PORTC);
 4d6:	85 b3       	in	r24, 0x15	; 21
 4d8:	80 95       	com	r24
 4da:	85 bb       	out	0x15, r24	; 21
		break;
 4dc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=(~PORTD);
 4de:	82 b3       	in	r24, 0x12	; 18
 4e0:	80 95       	com	r24
 4e2:	82 bb       	out	0x12, r24	; 18
 4e4:	08 95       	ret

000004e6 <DIO_readPORT>:
	}
}
unsigned char DIO_readPORT(unsigned char portname)
{
	unsigned char val;
	switch(portname)
 4e6:	84 34       	cpi	r24, 0x44	; 68
 4e8:	d9 f0       	breq	.+54     	; 0x520 <DIO_readPORT+0x3a>
 4ea:	85 34       	cpi	r24, 0x45	; 69
 4ec:	38 f4       	brcc	.+14     	; 0x4fc <DIO_readPORT+0x16>
 4ee:	82 34       	cpi	r24, 0x42	; 66
 4f0:	99 f0       	breq	.+38     	; 0x518 <DIO_readPORT+0x32>
 4f2:	83 34       	cpi	r24, 0x43	; 67
 4f4:	98 f4       	brcc	.+38     	; 0x51c <DIO_readPORT+0x36>
 4f6:	81 34       	cpi	r24, 0x41	; 65
 4f8:	a1 f4       	brne	.+40     	; 0x522 <DIO_readPORT+0x3c>
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <DIO_readPORT+0x2e>
 4fc:	82 36       	cpi	r24, 0x62	; 98
 4fe:	61 f0       	breq	.+24     	; 0x518 <DIO_readPORT+0x32>
 500:	83 36       	cpi	r24, 0x63	; 99
 502:	18 f4       	brcc	.+6      	; 0x50a <DIO_readPORT+0x24>
 504:	81 36       	cpi	r24, 0x61	; 97
 506:	69 f4       	brne	.+26     	; 0x522 <DIO_readPORT+0x3c>
 508:	05 c0       	rjmp	.+10     	; 0x514 <DIO_readPORT+0x2e>
 50a:	83 36       	cpi	r24, 0x63	; 99
 50c:	39 f0       	breq	.+14     	; 0x51c <DIO_readPORT+0x36>
 50e:	84 36       	cpi	r24, 0x64	; 100
 510:	41 f4       	brne	.+16     	; 0x522 <DIO_readPORT+0x3c>
 512:	06 c0       	rjmp	.+12     	; 0x520 <DIO_readPORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 514:	99 b3       	in	r25, 0x19	; 25
		break;
 516:	05 c0       	rjmp	.+10     	; 0x522 <DIO_readPORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
 518:	96 b3       	in	r25, 0x16	; 22
		break;
 51a:	03 c0       	rjmp	.+6      	; 0x522 <DIO_readPORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
 51c:	93 b3       	in	r25, 0x13	; 19
		break;
 51e:	01 c0       	rjmp	.+2      	; 0x522 <DIO_readPORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
 520:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 522:	89 2f       	mov	r24, r25
 524:	08 95       	ret

00000526 <DIO_pullupconnect>:
void DIO_pullupconnect(unsigned char portname,unsigned char pinnumber,unsigned char connect)
{
	DIO_writePIN(portname,pinnumber,connect);
 526:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
}
 52a:	08 95       	ret

0000052c <DIO_write_low_nibble>:
void DIO_write_low_nibble(unsigned char portname,unsigned char val)
{
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	c8 2f       	mov	r28, r24
 532:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,0,READ_BIT(val,0));
 534:	46 2f       	mov	r20, r22
 536:	41 70       	andi	r20, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,1,READ_BIT(val,1));
 53e:	4d 2f       	mov	r20, r29
 540:	46 95       	lsr	r20
 542:	41 70       	andi	r20, 0x01	; 1
 544:	8c 2f       	mov	r24, r28
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,2,READ_BIT(val,2));
 54c:	4d 2f       	mov	r20, r29
 54e:	46 95       	lsr	r20
 550:	46 95       	lsr	r20
 552:	41 70       	andi	r20, 0x01	; 1
 554:	8c 2f       	mov	r24, r28
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,3,READ_BIT(val,3));
 55c:	d6 95       	lsr	r29
 55e:	d6 95       	lsr	r29
 560:	d6 95       	lsr	r29
 562:	4d 2f       	mov	r20, r29
 564:	41 70       	andi	r20, 0x01	; 1
 566:	8c 2f       	mov	r24, r28
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <DIO_write_high_nibble>:
void DIO_write_high_nibble(unsigned char portname,unsigned char val)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	c8 2f       	mov	r28, r24
 57a:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,4,READ_BIT(val,0));
 57c:	46 2f       	mov	r20, r22
 57e:	41 70       	andi	r20, 0x01	; 1
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,5,READ_BIT(val,1));
 586:	4d 2f       	mov	r20, r29
 588:	46 95       	lsr	r20
 58a:	41 70       	andi	r20, 0x01	; 1
 58c:	8c 2f       	mov	r24, r28
 58e:	65 e0       	ldi	r22, 0x05	; 5
 590:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,6,READ_BIT(val,2));
 594:	4d 2f       	mov	r20, r29
 596:	46 95       	lsr	r20
 598:	46 95       	lsr	r20
 59a:	41 70       	andi	r20, 0x01	; 1
 59c:	8c 2f       	mov	r24, r28
 59e:	66 e0       	ldi	r22, 0x06	; 6
 5a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	DIO_writePIN(portname,7,READ_BIT(val,3));
 5a4:	d6 95       	lsr	r29
 5a6:	d6 95       	lsr	r29
 5a8:	d6 95       	lsr	r29
 5aa:	4d 2f       	mov	r20, r29
 5ac:	41 70       	andi	r20, 0x01	; 1
 5ae:	8c 2f       	mov	r24, r28
 5b0:	67 e0       	ldi	r22, 0x07	; 7
 5b2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <LED_init>:
#include "DIO.h"

void LED_init(unsigned char portname,unsigned char pinnumber)
{
	DIO_setPINDir(portname,pinnumber,1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_setPINDir>
}
 5c2:	08 95       	ret

000005c4 <LED_on>:
void LED_on(unsigned char portname,unsigned char pinnumber)
{
	DIO_writePIN(portname,pinnumber,1);
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
}
 5ca:	08 95       	ret

000005cc <LED_off>:
void LED_off(unsigned char portname,unsigned char pinnumber)
{
	DIO_writePIN(portname,pinnumber,0);
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
}
 5d2:	08 95       	ret

000005d4 <LED_toggle>:
void LED_toggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_togglePIN(portname,pinnumber);
 5d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_togglePIN>
}
 5d8:	08 95       	ret

000005da <LED_readstatus>:
unsigned char LED_readstatus(unsigned char portname,unsigned char pinnumber)
{
	return DIO_readPIN(portname,pinnumber);
 5da:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_readPIN>
 5de:	08 95       	ret

000005e0 <main>:
volatile unsigned short set_temp=INITIAL_SET;
volatile unsigned short act_temp;

int main(void)
{
	SPI_Slave_init();
 5e0:	0e 94 99 04 	call	0x932	; 0x932 <SPI_Slave_init>
	ADC_init();
 5e4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LED_init('D',2);
 5e8:	84 e4       	ldi	r24, 0x44	; 68
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	LED_init('D',3);
 5f0:	84 e4       	ldi	r24, 0x44	; 68
 5f2:	63 e0       	ldi	r22, 0x03	; 3
 5f4:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	LED_init('D',4);
 5f8:	84 e4       	ldi	r24, 0x44	; 68
 5fa:	64 e0       	ldi	r22, 0x04	; 4
 5fc:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	LED_init('D',5);
 600:	84 e4       	ldi	r24, 0x44	; 68
 602:	65 e0       	ldi	r22, 0x05	; 5
 604:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	LED_init('D',6);
 608:	84 e4       	ldi	r24, 0x44	; 68
 60a:	66 e0       	ldi	r22, 0x06	; 6
 60c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	LED_init('C',0);
 610:	83 e4       	ldi	r24, 0x43	; 67
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_init>
	/* Output from slave */
	unsigned char status;
    while(1)
    {	
		/* Receive instructions from master */
        func = SPI_Slave_receive(DUMMY_DATA);
 618:	8f ef       	ldi	r24, 0xFF	; 255
 61a:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
		switch(func)
 61e:	8d 34       	cpi	r24, 0x4D	; 77
 620:	31 f0       	breq	.+12     	; 0x62e <main+0x4e>
 622:	84 35       	cpi	r24, 0x54	; 84
 624:	09 f4       	brne	.+2      	; 0x628 <main+0x48>
 626:	9d c0       	rjmp	.+314    	; 0x762 <main+0x182>
 628:	81 34       	cpi	r24, 0x41	; 65
 62a:	b1 f7       	brne	.-20     	; 0x618 <main+0x38>
 62c:	bd c0       	rjmp	.+378    	; 0x7a8 <main+0x1c8>
		{
			case 'M':
			room_num = SPI_Slave_receive(DUMMY_DATA);
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
			switch(room_num)
 634:	82 33       	cpi	r24, 0x32	; 50
 636:	61 f1       	breq	.+88     	; 0x690 <main+0xb0>
 638:	83 33       	cpi	r24, 0x33	; 51
 63a:	18 f4       	brcc	.+6      	; 0x642 <main+0x62>
 63c:	81 33       	cpi	r24, 0x31	; 49
 63e:	61 f7       	brne	.-40     	; 0x618 <main+0x38>
 640:	06 c0       	rjmp	.+12     	; 0x64e <main+0x6e>
 642:	83 33       	cpi	r24, 0x33	; 51
 644:	09 f4       	brne	.+2      	; 0x648 <main+0x68>
 646:	47 c0       	rjmp	.+142    	; 0x6d6 <main+0xf6>
 648:	84 33       	cpi	r24, 0x34	; 52
 64a:	31 f7       	brne	.-52     	; 0x618 <main+0x38>
 64c:	67 c0       	rjmp	.+206    	; 0x71c <main+0x13c>
			{
				case '1':
				signal = SPI_Slave_receive(DUMMY_DATA);
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(signal)
 654:	82 35       	cpi	r24, 0x52	; 82
 656:	19 f0       	breq	.+6      	; 0x65e <main+0x7e>
 658:	87 35       	cpi	r24, 0x57	; 87
 65a:	f1 f6       	brne	.-68     	; 0x618 <main+0x38>
 65c:	07 c0       	rjmp	.+14     	; 0x66c <main+0x8c>
				{
					case 'R':
					status = LED_readstatus('D',2);
 65e:	84 e4       	ldi	r24, 0x44	; 68
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
					SPI_Slave_receive(status);
 666:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					break;
 66a:	d6 cf       	rjmp	.-84     	; 0x618 <main+0x38>
					case 'W':
					order = SPI_Slave_receive(DUMMY_DATA);
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					switch(order)
 672:	81 33       	cpi	r24, 0x31	; 49
 674:	19 f0       	breq	.+6      	; 0x67c <main+0x9c>
 676:	82 33       	cpi	r24, 0x32	; 50
 678:	79 f6       	brne	.-98     	; 0x618 <main+0x38>
 67a:	05 c0       	rjmp	.+10     	; 0x686 <main+0xa6>
					{
						case '1':
						LED_on('D',2);
 67c:	84 e4       	ldi	r24, 0x44	; 68
 67e:	62 e0       	ldi	r22, 0x02	; 2
 680:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
						break;
 684:	c9 cf       	rjmp	.-110    	; 0x618 <main+0x38>
						case '2':
						LED_off('D',2);
 686:	84 e4       	ldi	r24, 0x44	; 68
 688:	62 e0       	ldi	r22, 0x02	; 2
 68a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
						break;
 68e:	c4 cf       	rjmp	.-120    	; 0x618 <main+0x38>
					}
					break;
				}
				break;
				case '2':
				signal = SPI_Slave_receive(DUMMY_DATA);
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(signal)
 696:	82 35       	cpi	r24, 0x52	; 82
 698:	21 f0       	breq	.+8      	; 0x6a2 <main+0xc2>
 69a:	87 35       	cpi	r24, 0x57	; 87
 69c:	09 f0       	breq	.+2      	; 0x6a0 <main+0xc0>
 69e:	bc cf       	rjmp	.-136    	; 0x618 <main+0x38>
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <main+0xd0>
				{
					case 'R':
					status = LED_readstatus('D',3);
 6a2:	84 e4       	ldi	r24, 0x44	; 68
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
					SPI_Slave_receive(status);
 6aa:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					break;
 6ae:	b4 cf       	rjmp	.-152    	; 0x618 <main+0x38>
					case 'W':
					order = SPI_Slave_receive(DUMMY_DATA);
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					switch(order)
 6b6:	81 33       	cpi	r24, 0x31	; 49
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <main+0xe2>
 6ba:	82 33       	cpi	r24, 0x32	; 50
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <main+0xe0>
 6be:	ac cf       	rjmp	.-168    	; 0x618 <main+0x38>
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <main+0xec>
					{
						case '1':
						LED_on('D',3);
 6c2:	84 e4       	ldi	r24, 0x44	; 68
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
						break;
 6ca:	a6 cf       	rjmp	.-180    	; 0x618 <main+0x38>
						case '2':
						LED_off('D',3);
 6cc:	84 e4       	ldi	r24, 0x44	; 68
 6ce:	63 e0       	ldi	r22, 0x03	; 3
 6d0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
						break;
 6d4:	a1 cf       	rjmp	.-190    	; 0x618 <main+0x38>
					}
					break;
				}
				break;
				case '3':
				signal = SPI_Slave_receive(DUMMY_DATA);
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(signal)
 6dc:	82 35       	cpi	r24, 0x52	; 82
 6de:	21 f0       	breq	.+8      	; 0x6e8 <main+0x108>
 6e0:	87 35       	cpi	r24, 0x57	; 87
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <main+0x106>
 6e4:	99 cf       	rjmp	.-206    	; 0x618 <main+0x38>
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <main+0x116>
				{
					case 'R':
					status = LED_readstatus('D',4);
 6e8:	84 e4       	ldi	r24, 0x44	; 68
 6ea:	64 e0       	ldi	r22, 0x04	; 4
 6ec:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
					SPI_Slave_receive(status);
 6f0:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					break;
 6f4:	91 cf       	rjmp	.-222    	; 0x618 <main+0x38>
					case 'W':
					order = SPI_Slave_receive(DUMMY_DATA);
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					switch(order)
 6fc:	81 33       	cpi	r24, 0x31	; 49
 6fe:	21 f0       	breq	.+8      	; 0x708 <main+0x128>
 700:	82 33       	cpi	r24, 0x32	; 50
 702:	09 f0       	breq	.+2      	; 0x706 <main+0x126>
 704:	89 cf       	rjmp	.-238    	; 0x618 <main+0x38>
 706:	05 c0       	rjmp	.+10     	; 0x712 <main+0x132>
					{
						case '1':
						LED_on('D',4);
 708:	84 e4       	ldi	r24, 0x44	; 68
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
						break;
 710:	83 cf       	rjmp	.-250    	; 0x618 <main+0x38>
						case '2':
						LED_off('D',4);
 712:	84 e4       	ldi	r24, 0x44	; 68
 714:	64 e0       	ldi	r22, 0x04	; 4
 716:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
						break;
 71a:	7e cf       	rjmp	.-260    	; 0x618 <main+0x38>
					}
					break;
				}
				break;
				case '4':
				signal = SPI_Slave_receive(DUMMY_DATA);
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(signal)
 722:	82 35       	cpi	r24, 0x52	; 82
 724:	21 f0       	breq	.+8      	; 0x72e <main+0x14e>
 726:	87 35       	cpi	r24, 0x57	; 87
 728:	09 f0       	breq	.+2      	; 0x72c <main+0x14c>
 72a:	76 cf       	rjmp	.-276    	; 0x618 <main+0x38>
 72c:	07 c0       	rjmp	.+14     	; 0x73c <main+0x15c>
				{
					case 'R':
					status = LED_readstatus('D',5);
 72e:	84 e4       	ldi	r24, 0x44	; 68
 730:	65 e0       	ldi	r22, 0x05	; 5
 732:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
					SPI_Slave_receive(status);
 736:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					break;
 73a:	6e cf       	rjmp	.-292    	; 0x618 <main+0x38>
					case 'W':
					order = SPI_Slave_receive(DUMMY_DATA);
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					switch(order)
 742:	81 33       	cpi	r24, 0x31	; 49
 744:	21 f0       	breq	.+8      	; 0x74e <main+0x16e>
 746:	82 33       	cpi	r24, 0x32	; 50
 748:	09 f0       	breq	.+2      	; 0x74c <main+0x16c>
 74a:	66 cf       	rjmp	.-308    	; 0x618 <main+0x38>
 74c:	05 c0       	rjmp	.+10     	; 0x758 <main+0x178>
					{
						case '1':
						LED_on('D',5);
 74e:	84 e4       	ldi	r24, 0x44	; 68
 750:	65 e0       	ldi	r22, 0x05	; 5
 752:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
						break;
 756:	60 cf       	rjmp	.-320    	; 0x618 <main+0x38>
						case '2':
						LED_off('D',5);
 758:	84 e4       	ldi	r24, 0x44	; 68
 75a:	65 e0       	ldi	r22, 0x05	; 5
 75c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
						break;
 760:	5b cf       	rjmp	.-330    	; 0x618 <main+0x38>
				}
				break;
			}
			break;
			case 'T':
			signal = SPI_Slave_receive(DUMMY_DATA);
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
			switch(signal)
 768:	82 35       	cpi	r24, 0x52	; 82
 76a:	21 f0       	breq	.+8      	; 0x774 <main+0x194>
 76c:	87 35       	cpi	r24, 0x57	; 87
 76e:	09 f0       	breq	.+2      	; 0x772 <main+0x192>
 770:	53 cf       	rjmp	.-346    	; 0x618 <main+0x38>
 772:	07 c0       	rjmp	.+14     	; 0x782 <main+0x1a2>
			{
				case 'R':
				status = LED_readstatus('D',6);
 774:	84 e4       	ldi	r24, 0x44	; 68
 776:	66 e0       	ldi	r22, 0x06	; 6
 778:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
				SPI_Slave_receive(status);
 77c:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				break;
 780:	4b cf       	rjmp	.-362    	; 0x618 <main+0x38>
				case 'W':
				order = SPI_Slave_receive(DUMMY_DATA);
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(order)
 788:	81 33       	cpi	r24, 0x31	; 49
 78a:	21 f0       	breq	.+8      	; 0x794 <main+0x1b4>
 78c:	82 33       	cpi	r24, 0x32	; 50
 78e:	09 f0       	breq	.+2      	; 0x792 <main+0x1b2>
 790:	43 cf       	rjmp	.-378    	; 0x618 <main+0x38>
 792:	05 c0       	rjmp	.+10     	; 0x79e <main+0x1be>
				{
					case '1':
					LED_on('D',6);
 794:	84 e4       	ldi	r24, 0x44	; 68
 796:	66 e0       	ldi	r22, 0x06	; 6
 798:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
					break;
 79c:	3d cf       	rjmp	.-390    	; 0x618 <main+0x38>
					case '2':
					LED_off('D',6);
 79e:	84 e4       	ldi	r24, 0x44	; 68
 7a0:	66 e0       	ldi	r22, 0x06	; 6
 7a2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
					break;
 7a6:	38 cf       	rjmp	.-400    	; 0x618 <main+0x38>
				}
				break;
			}
			break;
			case 'A':
			temp_signal = SPI_Slave_receive(DUMMY_DATA);
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
			switch(temp_signal)
 7ae:	83 34       	cpi	r24, 0x43	; 67
 7b0:	21 f1       	breq	.+72     	; 0x7fa <main+0x21a>
 7b2:	83 35       	cpi	r24, 0x53	; 83
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <main+0x1d8>
 7b6:	30 cf       	rjmp	.-416    	; 0x618 <main+0x38>
			{
				case 'S':
				set_temp = (SPI_Slave_receive(DUMMY_DATA))*10;
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	c9 01       	movw	r24, r18
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	9c 01       	movw	r18, r24
 7ca:	22 0f       	add	r18, r18
 7cc:	33 1f       	adc	r19, r19
 7ce:	22 0f       	add	r18, r18
 7d0:	33 1f       	adc	r19, r19
 7d2:	82 0f       	add	r24, r18
 7d4:	93 1f       	adc	r25, r19
 7d6:	90 93 61 00 	sts	0x0061, r25
 7da:	80 93 60 00 	sts	0x0060, r24
				set_temp+= SPI_Slave_receive(DUMMY_DATA);
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
 7e4:	20 91 60 00 	lds	r18, 0x0060
 7e8:	30 91 61 00 	lds	r19, 0x0061
 7ec:	28 0f       	add	r18, r24
 7ee:	31 1d       	adc	r19, r1
 7f0:	30 93 61 00 	sts	0x0061, r19
 7f4:	20 93 60 00 	sts	0x0060, r18
				break;
 7f8:	0f cf       	rjmp	.-482    	; 0x618 <main+0x38>
				case 'C':
				signal = SPI_Slave_receive(DUMMY_DATA);
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
				switch(signal)
 800:	82 35       	cpi	r24, 0x52	; 82
 802:	21 f0       	breq	.+8      	; 0x80c <main+0x22c>
 804:	87 35       	cpi	r24, 0x57	; 87
 806:	09 f0       	breq	.+2      	; 0x80a <main+0x22a>
 808:	07 cf       	rjmp	.-498    	; 0x618 <main+0x38>
 80a:	07 c0       	rjmp	.+14     	; 0x81a <main+0x23a>
				{
					case 'R':
					status = LED_readstatus('C',0);
 80c:	83 e4       	ldi	r24, 0x43	; 67
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	0e 94 ed 02 	call	0x5da	; 0x5da <LED_readstatus>
					SPI_Slave_receive(status);
 814:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					break;
 818:	ff ce       	rjmp	.-514    	; 0x618 <main+0x38>
					case 'W':
					order = SPI_Slave_receive(DUMMY_DATA);
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	0e 94 ad 04 	call	0x95a	; 0x95a <SPI_Slave_receive>
					switch(order)
 820:	81 33       	cpi	r24, 0x31	; 49
 822:	21 f0       	breq	.+8      	; 0x82c <main+0x24c>
 824:	82 33       	cpi	r24, 0x32	; 50
 826:	09 f0       	breq	.+2      	; 0x82a <main+0x24a>
 828:	f7 ce       	rjmp	.-530    	; 0x618 <main+0x38>
 82a:	03 c0       	rjmp	.+6      	; 0x832 <main+0x252>
					{
						case '1':
						timer0_CTC_init_interrupt();
 82c:	0e 94 ca 04 	call	0x994	; 0x994 <timer0_CTC_init_interrupt>
						break;
 830:	f3 ce       	rjmp	.-538    	; 0x618 <main+0x38>
						case '2':
						timer0_stop();
 832:	0e 94 10 05 	call	0xa20	; 0xa20 <timer0_stop>
						LED_off('C',0);
 836:	83 e4       	ldi	r24, 0x43	; 67
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
						break;
 83e:	ec ce       	rjmp	.-552    	; 0x618 <main+0x38>

00000840 <__vector_10>:
    }
}

/* Perform operation of air conditioner (If it was turned ON by master) */
ISR(TIMER0_COMP_vect)
{
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	2f 93       	push	r18
 84c:	3f 93       	push	r19
 84e:	4f 93       	push	r20
 850:	5f 93       	push	r21
 852:	6f 93       	push	r22
 854:	7f 93       	push	r23
 856:	8f 93       	push	r24
 858:	9f 93       	push	r25
 85a:	af 93       	push	r26
 85c:	bf 93       	push	r27
 85e:	ef 93       	push	r30
 860:	ff 93       	push	r31
	counter++;
 862:	80 91 62 00 	lds	r24, 0x0062
 866:	8f 5f       	subi	r24, 0xFF	; 255
 868:	80 93 62 00 	sts	0x0062, r24
	if (counter == 10)
 86c:	80 91 62 00 	lds	r24, 0x0062
 870:	8a 30       	cpi	r24, 0x0A	; 10
 872:	b1 f5       	brne	.+108    	; 0x8e0 <__stack+0x81>
	{
		counter = 0;
 874:	10 92 62 00 	sts	0x0062, r1
		act_temp = 0.25 * ADC_read();
 878:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
 87c:	bc 01       	movw	r22, r24
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	40 e8       	ldi	r20, 0x80	; 128
 88c:	5e e3       	ldi	r21, 0x3E	; 62
 88e:	0e 94 a4 05 	call	0xb48	; 0xb48 <__mulsf3>
 892:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
 896:	dc 01       	movw	r26, r24
 898:	cb 01       	movw	r24, r22
 89a:	90 93 64 00 	sts	0x0064, r25
 89e:	80 93 63 00 	sts	0x0063, r24
		if (act_temp > set_temp)
 8a2:	20 91 63 00 	lds	r18, 0x0063
 8a6:	30 91 64 00 	lds	r19, 0x0064
 8aa:	80 91 60 00 	lds	r24, 0x0060
 8ae:	90 91 61 00 	lds	r25, 0x0061
 8b2:	82 17       	cp	r24, r18
 8b4:	93 07       	cpc	r25, r19
 8b6:	28 f4       	brcc	.+10     	; 0x8c2 <__stack+0x63>
		{
			LED_on('C',0);
 8b8:	83 e4       	ldi	r24, 0x43	; 67
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_on>
 8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <__stack+0x81>
		}
		else if (act_temp < set_temp)
 8c2:	20 91 63 00 	lds	r18, 0x0063
 8c6:	30 91 64 00 	lds	r19, 0x0064
 8ca:	80 91 60 00 	lds	r24, 0x0060
 8ce:	90 91 61 00 	lds	r25, 0x0061
 8d2:	28 17       	cp	r18, r24
 8d4:	39 07       	cpc	r19, r25
 8d6:	20 f4       	brcc	.+8      	; 0x8e0 <__stack+0x81>
		{
			LED_off('C',0);
 8d8:	83 e4       	ldi	r24, 0x43	; 67
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LED_off>
		}
	}
 8e0:	ff 91       	pop	r31
 8e2:	ef 91       	pop	r30
 8e4:	bf 91       	pop	r27
 8e6:	af 91       	pop	r26
 8e8:	9f 91       	pop	r25
 8ea:	8f 91       	pop	r24
 8ec:	7f 91       	pop	r23
 8ee:	6f 91       	pop	r22
 8f0:	5f 91       	pop	r21
 8f2:	4f 91       	pop	r20
 8f4:	3f 91       	pop	r19
 8f6:	2f 91       	pop	r18
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti

00000902 <SPI_Master_init>:
#include "DIO.h"

void SPI_Master_init(void)
{
	/* Set SS, MOSI and SCK as output pins */
	DIO_setPINDir('B',4,1);
 902:	82 e4       	ldi	r24, 0x42	; 66
 904:	64 e0       	ldi	r22, 0x04	; 4
 906:	41 e0       	ldi	r20, 0x01	; 1
 908:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_setPINDir>
	DIO_setPINDir('B',5,1);
 90c:	82 e4       	ldi	r24, 0x42	; 66
 90e:	65 e0       	ldi	r22, 0x05	; 5
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_setPINDir>
	DIO_setPINDir('B',7,1);
 916:	82 e4       	ldi	r24, 0x42	; 66
 918:	67 e0       	ldi	r22, 0x07	; 7
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_setPINDir>
	/* Enable Master mode */
	SET_BIT(SPCR,MSTR);
 920:	6c 9a       	sbi	0x0d, 4	; 13
	/* Set clock to Fosc/16 */
	SET_BIT(SPCR,SPR0);
 922:	68 9a       	sbi	0x0d, 0	; 13
	/* Enable SPI */
	SET_BIT(SPCR,SPE);
 924:	6e 9a       	sbi	0x0d, 6	; 13
	/* Deactivate SS pin */
	DIO_writePIN('B',4,1);
 926:	82 e4       	ldi	r24, 0x42	; 66
 928:	64 e0       	ldi	r22, 0x04	; 4
 92a:	41 e0       	ldi	r20, 0x01	; 1
 92c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
}
 930:	08 95       	ret

00000932 <SPI_Slave_init>:
void SPI_Slave_init(void)
{
	/* Set MISO as output pin */
	DIO_setPINDir('B',6,1);
 932:	82 e4       	ldi	r24, 0x42	; 66
 934:	66 e0       	ldi	r22, 0x06	; 6
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_setPINDir>
	/* Enable SPI */
	SET_BIT(SPCR,SPE);
 93c:	6e 9a       	sbi	0x0d, 6	; 13
}
 93e:	08 95       	ret

00000940 <SPI_Master_transmit>:
char SPI_Master_transmit(char Data)
{
 940:	cf 93       	push	r28
 942:	c8 2f       	mov	r28, r24
	/* Activate SS pin */
	DIO_writePIN('B',4,0);
 944:	82 e4       	ldi	r24, 0x42	; 66
 946:	64 e0       	ldi	r22, 0x04	; 4
 948:	40 e0       	ldi	r20, 0x00	; 0
 94a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_writePIN>
	/* Put data in SPDR */
	SPDR = Data;
 94e:	cf b9       	out	0x0f, r28	; 15
	/* Wait until the transmission is finished */
	while(READ_BIT(SPSR,SPIF)==0);
 950:	77 9b       	sbis	0x0e, 7	; 14
 952:	fe cf       	rjmp	.-4      	; 0x950 <SPI_Master_transmit+0x10>
	/* Read SPDR */
	return SPDR;
 954:	8f b1       	in	r24, 0x0f	; 15
}
 956:	cf 91       	pop	r28
 958:	08 95       	ret

0000095a <SPI_Slave_receive>:
char SPI_Slave_receive(char Data)
{
	/* Put data in SPDR */
	SPDR = Data;
 95a:	8f b9       	out	0x0f, r24	; 15
	/* Wait until the reception is finished */
	while(READ_BIT(SPSR,SPIF)==0);
 95c:	77 9b       	sbis	0x0e, 7	; 14
 95e:	fe cf       	rjmp	.-4      	; 0x95c <SPI_Slave_receive+0x2>
	/* Read SPDR */
	return SPDR;
 960:	8f b1       	in	r24, 0x0f	; 15
}
 962:	08 95       	ret

00000964 <SPI_Master_transmit_string>:
void SPI_Master_transmit_string(char *ptr)
{
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 96a:	88 81       	ld	r24, Y
 96c:	88 23       	and	r24, r24
 96e:	79 f0       	breq	.+30     	; 0x98e <SPI_Master_transmit_string+0x2a>
	/* Wait until the reception is finished */
	while(READ_BIT(SPSR,SPIF)==0);
	/* Read SPDR */
	return SPDR;
}
void SPI_Master_transmit_string(char *ptr)
 970:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr != 0)
	{
		SPI_Master_transmit(*ptr);
 972:	0e 94 a0 04 	call	0x940	; 0x940 <SPI_Master_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	90 e7       	ldi	r25, 0x70	; 112
 97a:	a2 e0       	ldi	r26, 0x02	; 2
 97c:	81 50       	subi	r24, 0x01	; 1
 97e:	90 40       	sbci	r25, 0x00	; 0
 980:	a0 40       	sbci	r26, 0x00	; 0
 982:	e1 f7       	brne	.-8      	; 0x97c <SPI_Master_transmit_string+0x18>
 984:	00 c0       	rjmp	.+0      	; 0x986 <SPI_Master_transmit_string+0x22>
 986:	00 00       	nop
	/* Read SPDR */
	return SPDR;
}
void SPI_Master_transmit_string(char *ptr)
{
	while(*ptr != 0)
 988:	89 91       	ld	r24, Y+
 98a:	88 23       	and	r24, r24
 98c:	91 f7       	brne	.-28     	; 0x972 <SPI_Master_transmit_string+0xe>
	{
		SPI_Master_transmit(*ptr);
		ptr++;
		_delay_ms(100);
	}
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	08 95       	ret

00000994 <timer0_CTC_init_interrupt>:
#include "std_macros.h"

void timer0_CTC_init_interrupt(void)
{
	/* select CTC mode */
	SET_BIT(TCCR0,WGM01);
 994:	83 b7       	in	r24, 0x33	; 51
 996:	88 60       	ori	r24, 0x08	; 8
 998:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=78;
 99a:	8e e4       	ldi	r24, 0x4E	; 78
 99c:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 99e:	83 b7       	in	r24, 0x33	; 51
 9a0:	81 60       	ori	r24, 0x01	; 1
 9a2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 9a4:	83 b7       	in	r24, 0x33	; 51
 9a6:	84 60       	ori	r24, 0x04	; 4
 9a8:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt */
	sei();
 9aa:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 9ac:	89 b7       	in	r24, 0x39	; 57
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	89 bf       	out	0x39, r24	; 57
}
 9b2:	08 95       	ret

000009b4 <timer0_wave_non_PWM>:
void timer0_wave_non_PWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 9b4:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode */
	SET_BIT(TCCR0,WGM01);
 9b6:	83 b7       	in	r24, 0x33	; 51
 9b8:	88 60       	ori	r24, 0x08	; 8
 9ba:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 9bc:	80 e4       	ldi	r24, 0x40	; 64
 9be:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 9c0:	83 b7       	in	r24, 0x33	; 51
 9c2:	81 60       	ori	r24, 0x01	; 1
 9c4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 9c6:	83 b7       	in	r24, 0x33	; 51
 9c8:	84 60       	ori	r24, 0x04	; 4
 9ca:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match */
	SET_BIT(TCCR0,COM00);
 9cc:	83 b7       	in	r24, 0x33	; 51
 9ce:	80 61       	ori	r24, 0x10	; 16
 9d0:	83 bf       	out	0x33, r24	; 51
}
 9d2:	08 95       	ret

000009d4 <timer0_wave_fast_PWM>:
void timer0_wave_fast_PWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 9d4:	bb 9a       	sbi	0x17, 3	; 23
	/* select fast PWM mode */
	SET_BIT(TCCR0,WGM00);
 9d6:	83 b7       	in	r24, 0x33	; 51
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 9dc:	83 b7       	in	r24, 0x33	; 51
 9de:	88 60       	ori	r24, 0x08	; 8
 9e0:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 9e2:	80 e4       	ldi	r24, 0x40	; 64
 9e4:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 9e6:	83 b7       	in	r24, 0x33	; 51
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 9ec:	83 b7       	in	r24, 0x33	; 51
 9ee:	84 60       	ori	r24, 0x04	; 4
 9f0:	83 bf       	out	0x33, r24	; 51
	/* clear OC0 on compare match, set OC0 at BOTTOM (non-inverting mode) */
	SET_BIT(TCCR0,COM01);
 9f2:	83 b7       	in	r24, 0x33	; 51
 9f4:	80 62       	ori	r24, 0x20	; 32
 9f6:	83 bf       	out	0x33, r24	; 51
}
 9f8:	08 95       	ret

000009fa <timer0_wave_phase_correct_PWM>:
void timer0_wave_phase_correct_PWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 9fa:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode */
	SET_BIT(TCCR0,WGM00);
 9fc:	83 b7       	in	r24, 0x33	; 51
 9fe:	80 64       	ori	r24, 0x40	; 64
 a00:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 a02:	80 e4       	ldi	r24, 0x40	; 64
 a04:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 a06:	83 b7       	in	r24, 0x33	; 51
 a08:	81 60       	ori	r24, 0x01	; 1
 a0a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a0c:	83 b7       	in	r24, 0x33	; 51
 a0e:	84 60       	ori	r24, 0x04	; 4
 a10:	83 bf       	out	0x33, r24	; 51
	/* set OC0 on compare match when up-counting, clear OC0 on compare match when down-counting */
	SET_BIT(TCCR0,COM00);
 a12:	83 b7       	in	r24, 0x33	; 51
 a14:	80 61       	ori	r24, 0x10	; 16
 a16:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 a18:	83 b7       	in	r24, 0x33	; 51
 a1a:	80 62       	ori	r24, 0x20	; 32
 a1c:	83 bf       	out	0x33, r24	; 51
}
 a1e:	08 95       	ret

00000a20 <timer0_stop>:
void timer0_stop(void)
{
	TCCR0 = 0;
 a20:	13 be       	out	0x33, r1	; 51
 a22:	08 95       	ret

00000a24 <__fixunssfsi>:
 a24:	70 d0       	rcall	.+224    	; 0xb06 <__fp_splitA>
 a26:	88 f0       	brcs	.+34     	; 0xa4a <__fixunssfsi+0x26>
 a28:	9f 57       	subi	r25, 0x7F	; 127
 a2a:	90 f0       	brcs	.+36     	; 0xa50 <__fixunssfsi+0x2c>
 a2c:	b9 2f       	mov	r27, r25
 a2e:	99 27       	eor	r25, r25
 a30:	b7 51       	subi	r27, 0x17	; 23
 a32:	a0 f0       	brcs	.+40     	; 0xa5c <__fixunssfsi+0x38>
 a34:	d1 f0       	breq	.+52     	; 0xa6a <__fixunssfsi+0x46>
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	1a f0       	brmi	.+6      	; 0xa46 <__fixunssfsi+0x22>
 a40:	ba 95       	dec	r27
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__fixunssfsi+0x12>
 a44:	12 c0       	rjmp	.+36     	; 0xa6a <__fixunssfsi+0x46>
 a46:	b1 30       	cpi	r27, 0x01	; 1
 a48:	81 f0       	breq	.+32     	; 0xa6a <__fixunssfsi+0x46>
 a4a:	77 d0       	rcall	.+238    	; 0xb3a <__fp_zero>
 a4c:	b1 e0       	ldi	r27, 0x01	; 1
 a4e:	08 95       	ret
 a50:	74 c0       	rjmp	.+232    	; 0xb3a <__fp_zero>
 a52:	67 2f       	mov	r22, r23
 a54:	78 2f       	mov	r23, r24
 a56:	88 27       	eor	r24, r24
 a58:	b8 5f       	subi	r27, 0xF8	; 248
 a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x46>
 a5c:	b9 3f       	cpi	r27, 0xF9	; 249
 a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x2e>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b3 95       	inc	r27
 a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x3c>
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x56>
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__floatunsisf>:
 a7c:	e8 94       	clt
 a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
 a80:	97 fb       	bst	r25, 7
 a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
 a84:	90 95       	com	r25
 a86:	80 95       	com	r24
 a88:	70 95       	com	r23
 a8a:	61 95       	neg	r22
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	99 23       	and	r25, r25
 a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
 a96:	f9 2f       	mov	r31, r25
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	bb 27       	eor	r27, r27
 a9c:	93 95       	inc	r25
 a9e:	f6 95       	lsr	r31
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f1 11       	cpse	r31, r1
 aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
 aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
 aae:	bb 0f       	add	r27, r27
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
 ac0:	88 23       	and	r24, r24
 ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
 ac4:	96 e9       	ldi	r25, 0x96	; 150
 ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
 ac8:	77 23       	and	r23, r23
 aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
 acc:	9e e8       	ldi	r25, 0x8E	; 142
 ace:	87 2f       	mov	r24, r23
 ad0:	76 2f       	mov	r23, r22
 ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
 ad4:	66 23       	and	r22, r22
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
 ad8:	96 e8       	ldi	r25, 0x86	; 134
 ada:	86 2f       	mov	r24, r22
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
 ae2:	9a 95       	dec	r25
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
 aec:	88 0f       	add	r24, r24
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_split3>:
 af6:	57 fd       	sbrc	r21, 7
 af8:	90 58       	subi	r25, 0x80	; 128
 afa:	44 0f       	add	r20, r20
 afc:	55 1f       	adc	r21, r21
 afe:	59 f0       	breq	.+22     	; 0xb16 <__fp_splitA+0x10>
 b00:	5f 3f       	cpi	r21, 0xFF	; 255
 b02:	71 f0       	breq	.+28     	; 0xb20 <__fp_splitA+0x1a>
 b04:	47 95       	ror	r20

00000b06 <__fp_splitA>:
 b06:	88 0f       	add	r24, r24
 b08:	97 fb       	bst	r25, 7
 b0a:	99 1f       	adc	r25, r25
 b0c:	61 f0       	breq	.+24     	; 0xb26 <__fp_splitA+0x20>
 b0e:	9f 3f       	cpi	r25, 0xFF	; 255
 b10:	79 f0       	breq	.+30     	; 0xb30 <__fp_splitA+0x2a>
 b12:	87 95       	ror	r24
 b14:	08 95       	ret
 b16:	12 16       	cp	r1, r18
 b18:	13 06       	cpc	r1, r19
 b1a:	14 06       	cpc	r1, r20
 b1c:	55 1f       	adc	r21, r21
 b1e:	f2 cf       	rjmp	.-28     	; 0xb04 <__fp_split3+0xe>
 b20:	46 95       	lsr	r20
 b22:	f1 df       	rcall	.-30     	; 0xb06 <__fp_splitA>
 b24:	08 c0       	rjmp	.+16     	; 0xb36 <__fp_splitA+0x30>
 b26:	16 16       	cp	r1, r22
 b28:	17 06       	cpc	r1, r23
 b2a:	18 06       	cpc	r1, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	f1 cf       	rjmp	.-30     	; 0xb12 <__fp_splitA+0xc>
 b30:	86 95       	lsr	r24
 b32:	71 05       	cpc	r23, r1
 b34:	61 05       	cpc	r22, r1
 b36:	08 94       	sec
 b38:	08 95       	ret

00000b3a <__fp_zero>:
 b3a:	e8 94       	clt

00000b3c <__fp_szero>:
 b3c:	bb 27       	eor	r27, r27
 b3e:	66 27       	eor	r22, r22
 b40:	77 27       	eor	r23, r23
 b42:	cb 01       	movw	r24, r22
 b44:	97 f9       	bld	r25, 7
 b46:	08 95       	ret

00000b48 <__mulsf3>:
 b48:	0b d0       	rcall	.+22     	; 0xb60 <__mulsf3x>
 b4a:	78 c0       	rjmp	.+240    	; 0xc3c <__fp_round>
 b4c:	69 d0       	rcall	.+210    	; 0xc20 <__fp_pscA>
 b4e:	28 f0       	brcs	.+10     	; 0xb5a <__mulsf3+0x12>
 b50:	6e d0       	rcall	.+220    	; 0xc2e <__fp_pscB>
 b52:	18 f0       	brcs	.+6      	; 0xb5a <__mulsf3+0x12>
 b54:	95 23       	and	r25, r21
 b56:	09 f0       	breq	.+2      	; 0xb5a <__mulsf3+0x12>
 b58:	5a c0       	rjmp	.+180    	; 0xc0e <__fp_inf>
 b5a:	5f c0       	rjmp	.+190    	; 0xc1a <__fp_nan>
 b5c:	11 24       	eor	r1, r1
 b5e:	ee cf       	rjmp	.-36     	; 0xb3c <__fp_szero>

00000b60 <__mulsf3x>:
 b60:	ca df       	rcall	.-108    	; 0xaf6 <__fp_split3>
 b62:	a0 f3       	brcs	.-24     	; 0xb4c <__mulsf3+0x4>

00000b64 <__mulsf3_pse>:
 b64:	95 9f       	mul	r25, r21
 b66:	d1 f3       	breq	.-12     	; 0xb5c <__mulsf3+0x14>
 b68:	95 0f       	add	r25, r21
 b6a:	50 e0       	ldi	r21, 0x00	; 0
 b6c:	55 1f       	adc	r21, r21
 b6e:	62 9f       	mul	r22, r18
 b70:	f0 01       	movw	r30, r0
 b72:	72 9f       	mul	r23, r18
 b74:	bb 27       	eor	r27, r27
 b76:	f0 0d       	add	r31, r0
 b78:	b1 1d       	adc	r27, r1
 b7a:	63 9f       	mul	r22, r19
 b7c:	aa 27       	eor	r26, r26
 b7e:	f0 0d       	add	r31, r0
 b80:	b1 1d       	adc	r27, r1
 b82:	aa 1f       	adc	r26, r26
 b84:	64 9f       	mul	r22, r20
 b86:	66 27       	eor	r22, r22
 b88:	b0 0d       	add	r27, r0
 b8a:	a1 1d       	adc	r26, r1
 b8c:	66 1f       	adc	r22, r22
 b8e:	82 9f       	mul	r24, r18
 b90:	22 27       	eor	r18, r18
 b92:	b0 0d       	add	r27, r0
 b94:	a1 1d       	adc	r26, r1
 b96:	62 1f       	adc	r22, r18
 b98:	73 9f       	mul	r23, r19
 b9a:	b0 0d       	add	r27, r0
 b9c:	a1 1d       	adc	r26, r1
 b9e:	62 1f       	adc	r22, r18
 ba0:	83 9f       	mul	r24, r19
 ba2:	a0 0d       	add	r26, r0
 ba4:	61 1d       	adc	r22, r1
 ba6:	22 1f       	adc	r18, r18
 ba8:	74 9f       	mul	r23, r20
 baa:	33 27       	eor	r19, r19
 bac:	a0 0d       	add	r26, r0
 bae:	61 1d       	adc	r22, r1
 bb0:	23 1f       	adc	r18, r19
 bb2:	84 9f       	mul	r24, r20
 bb4:	60 0d       	add	r22, r0
 bb6:	21 1d       	adc	r18, r1
 bb8:	82 2f       	mov	r24, r18
 bba:	76 2f       	mov	r23, r22
 bbc:	6a 2f       	mov	r22, r26
 bbe:	11 24       	eor	r1, r1
 bc0:	9f 57       	subi	r25, 0x7F	; 127
 bc2:	50 40       	sbci	r21, 0x00	; 0
 bc4:	8a f0       	brmi	.+34     	; 0xbe8 <__mulsf3_pse+0x84>
 bc6:	e1 f0       	breq	.+56     	; 0xc00 <__mulsf3_pse+0x9c>
 bc8:	88 23       	and	r24, r24
 bca:	4a f0       	brmi	.+18     	; 0xbde <__mulsf3_pse+0x7a>
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	bb 1f       	adc	r27, r27
 bd2:	66 1f       	adc	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	91 50       	subi	r25, 0x01	; 1
 bda:	50 40       	sbci	r21, 0x00	; 0
 bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__mulsf3_pse+0x64>
 bde:	9e 3f       	cpi	r25, 0xFE	; 254
 be0:	51 05       	cpc	r21, r1
 be2:	70 f0       	brcs	.+28     	; 0xc00 <__mulsf3_pse+0x9c>
 be4:	14 c0       	rjmp	.+40     	; 0xc0e <__fp_inf>
 be6:	aa cf       	rjmp	.-172    	; 0xb3c <__fp_szero>
 be8:	5f 3f       	cpi	r21, 0xFF	; 255
 bea:	ec f3       	brlt	.-6      	; 0xbe6 <__mulsf3_pse+0x82>
 bec:	98 3e       	cpi	r25, 0xE8	; 232
 bee:	dc f3       	brlt	.-10     	; 0xbe6 <__mulsf3_pse+0x82>
 bf0:	86 95       	lsr	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	b7 95       	ror	r27
 bf8:	f7 95       	ror	r31
 bfa:	e7 95       	ror	r30
 bfc:	9f 5f       	subi	r25, 0xFF	; 255
 bfe:	c1 f7       	brne	.-16     	; 0xbf0 <__mulsf3_pse+0x8c>
 c00:	fe 2b       	or	r31, r30
 c02:	88 0f       	add	r24, r24
 c04:	91 1d       	adc	r25, r1
 c06:	96 95       	lsr	r25
 c08:	87 95       	ror	r24
 c0a:	97 f9       	bld	r25, 7
 c0c:	08 95       	ret

00000c0e <__fp_inf>:
 c0e:	97 f9       	bld	r25, 7
 c10:	9f 67       	ori	r25, 0x7F	; 127
 c12:	80 e8       	ldi	r24, 0x80	; 128
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	08 95       	ret

00000c1a <__fp_nan>:
 c1a:	9f ef       	ldi	r25, 0xFF	; 255
 c1c:	80 ec       	ldi	r24, 0xC0	; 192
 c1e:	08 95       	ret

00000c20 <__fp_pscA>:
 c20:	00 24       	eor	r0, r0
 c22:	0a 94       	dec	r0
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	18 06       	cpc	r1, r24
 c2a:	09 06       	cpc	r0, r25
 c2c:	08 95       	ret

00000c2e <__fp_pscB>:
 c2e:	00 24       	eor	r0, r0
 c30:	0a 94       	dec	r0
 c32:	12 16       	cp	r1, r18
 c34:	13 06       	cpc	r1, r19
 c36:	14 06       	cpc	r1, r20
 c38:	05 06       	cpc	r0, r21
 c3a:	08 95       	ret

00000c3c <__fp_round>:
 c3c:	09 2e       	mov	r0, r25
 c3e:	03 94       	inc	r0
 c40:	00 0c       	add	r0, r0
 c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0xc>
 c44:	88 23       	and	r24, r24
 c46:	52 f0       	brmi	.+20     	; 0xc5c <__fp_round+0x20>
 c48:	bb 0f       	add	r27, r27
 c4a:	40 f4       	brcc	.+16     	; 0xc5c <__fp_round+0x20>
 c4c:	bf 2b       	or	r27, r31
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__fp_round+0x18>
 c50:	60 ff       	sbrs	r22, 0
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <__fp_round+0x20>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	08 95       	ret

00000c5e <_exit>:
 c5e:	f8 94       	cli

00000c60 <__stop_program>:
 c60:	ff cf       	rjmp	.-2      	; 0xc60 <__stop_program>
